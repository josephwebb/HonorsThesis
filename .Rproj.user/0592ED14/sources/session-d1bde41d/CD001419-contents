
# Joseph Webb
# Honors Thesis
# March 9, 2023
#Testing change

# Load required libraries
library(tidyverse)
library(geosphere)

# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("ForestData.csv") %>% 
  select(-c(7:9)) %>% # remove empty columns
  slice(1:304) # select rows 1-304

colnames(forest_data)[5] <- "LONGITUDE"

station_data <- read.csv("NEStations.csv", header = TRUE)

# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)

############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
  distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
  closest_station_index <- which.min(distances)
  closest_station_id <- station_data$STATION_ID[closest_station_index]
  closest_station_distance <- distances[closest_station_index]
  return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}

# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
  rowwise() %>%
  mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
         DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)



# Round the distance measurements to one decimal place
forest_data$DIST_KM <- round(forest_data$DIST_KM, 1)

# View results
print(forest_data)
############## COMPLETE DATA SET ###############

############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)

# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)

# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)

library(ggplot2)

ggplot(forest_data, aes(x=DIST_KM)) + 
  geom_histogram(fill="cornflowerblue", color="black") +
  ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
  xlab("Distance (km)") + ylab("Count")

################ Gathering Data From https://www.ncei.noaa.gov/data/global-summary-of-the-month/access/ ######

## Generate List of Unique Appearances in CLOSE_STAT ##
unique_stations <- unique(forest_data$CLOSE_STAT)

# Create directory if it doesn't exist
if(!dir.exists("StatData")) {
  dir.create("StatData")
}

# Set the URL for the csv files
url <- "https://www.ncei.noaa.gov/data/global-summary-of-the-month/access/"

# Loop through the station IDs and download the corresponding csv file
# for (station_id in unique_stations) {
#  file_url <- paste0(url, station_id, ".csv")
#  download.file(file_url, destfile = paste0("StatData/", station_id, ".csv"), method = "curl")
# }

### Create new matrix that combines the station data for May 2022
## find used varaibles
# Set the path to the directory containing the CSV files
path <- "StatData"

# Get a list of all the CSV files in the directory
files <- list.files(path, pattern = ".csv$")

# Initialize an empty data frame to store the frequency counts
freq_table <- data.frame(variable = character(),
                         count = numeric(),
                         stringsAsFactors = FALSE)

# Loop through the CSV files
for (file in files) {
  # Read in the data from the current file
  data <- read.csv(file.path(path, file), stringsAsFactors = FALSE)
  
  # Get the column names
  col_names <- names(data)
  
  # Remove Station, Date, Latitude, Longitude, and Name columns
  col_names <- col_names[!col_names %in% c("STATION", "DATE", "LATITUDE", "LONGITUDE", "NAME")]
  
  # Loop through the remaining columns
  for (col_name in col_names) {
    # Check if the variable is already in the frequency table
    if (col_name %in% freq_table$variable) {
      # Increment the count for the variable
      freq_table[freq_table$variable == col_name, "count"] <- freq_table[freq_table$variable == col_name, "count"] + 1
    } else {
      # Add a new row to the frequency table for the variable
      freq_table <- rbind(freq_table, data.frame(variable = col_name, count = 1, stringsAsFactors = FALSE))
    }
  }
}

freq_table <- subset(freq_table, !grepl("ATTRIBUTES$", variable))

# Print the frequency table (45 variables)
print(freq_table)

#######################  Add Station Data to Forest ##############################
# Create a list of all Station_ID's
station_ids <- unique(forest_data$CLOSE_STAT)

# Create a data frame to hold the final output
output_df <- data.frame(matrix(nrow = length(station_ids), 
                               ncol = nrow(freq_table) + 2))
colnames(output_df) <- c("Station_ID", "DATE", freq_table$variable)

# Loop through each Station_ID
for (i in seq_along(station_ids)) {
  
  # Get the Station_ID and corresponding file name
  station_id <- station_ids[i]
  file_name <- paste0("StatData/", station_id, ".csv")
  
  # Check if the file exists
  if (!file.exists(file_name)) {
    output_df[i,] <- c(station_id, "NO-DATE", rep("", nrow(freq_table)))
    next
  }
  
  # Read in the file
  file_data <- read_csv(file_name)
  
  # Check if the file has a row with DATE == "2022-05"
  if (!("2022-05" %in% file_data$DATE)) {
    output_df[i,] <- c(station_id, "NO-DATE", rep("", nrow(freq_table)))
    next
  }
  
  # Filter the data to only keep the row with DATE == "2022-05"
  file_data <- filter(file_data, DATE == "2022-05")
  
  # Get the distance between the forest and weather station
  dist <- distHaversine(p1 = c(forest_data$LONGITUDE[i], forest_data$LATITUDE[i]), 
                        p2 = c(file_data$LONGITUDE, file_data$LATITUDE))
  
  # Add the distance to the file data
  file_data$DIST <- dist
  
  # Join the freq_table with the file data based on variable name
  output_row <- freq_table %>% 
    left_join(select(file_data, freq_table$variable, DIST), by = "variable") %>%
    select(DIST, freq_table$variable) %>%
    unlist() %>%
    as.vector()
  
  # Add the Station_ID and DATE to the output row
  output_row <- c(station_id, "2022-05", output_row)
  
  # Add the output row to the output dataframe
  output_df[i,] <- output_row
  
}

# Save the output dataframe to a csv file
write.csv(output_df, "output.csv", row.names = FALSE)
