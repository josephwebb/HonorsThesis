# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv")
colnames(forest_data)[5] <- "LONGITUDE"
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
# Define a function to find the closest station to a forest
find_closest_station <- function(lat, lon, station_data) {
# Compute distances to all stations
distances <- geosphere::distHaversine(
cbind(lon, lat),
cbind(station_data$LONGITUDE, station_data$LATITUDE)
)
# Find index of closest station
min_idx <- which.min(distances)
# Return ID and distance of closest station
return(list(STATION_ID = station_data$STATION_ID[min_idx],
DIST_KM = distances[min_idx]))
}
# Find closest station to each forest
forest_data <- forest_data %>% mutate(
STATION_INFO = pmap(list(LATITUDE, LONGITUDE), find_closest_station, station_data)
)
forest_data <- forest_data %>% slice(1:304)
# Convert STATION_INFO column to separate columns
forest_data <- forest_data %>%
separate(STATION_INFO, into = c("STATION_ID", "STATION_DIST"), sep = ",") %>%
mutate(STATION_DIST = as.numeric(STATION_DIST, na.rm = TRUE))
# Create a new table with selected columns
Output <- forest_data %>% select(FOREST_NAME, STATION_ID, STATION_DIST)
View(Output)
View(forest_data)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv")
colnames(forest_data)[5] <- "LONGITUDE"
View(forest_data)
# Load required libraries
library(tidyverse)
library(geosphere)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
View(forest_data)
# Remove degree and direction of latitude and longitude in forest_data
forest_data$LATITUDE <- substr(forest_data$LATITUDE, 1, nchar(forest_data$LATITUDE)-3)
forest_data$LONGITUDE <- substr(forest_data$LONGITUDE, 1, nchar(forest_data$LONGITUDE)-3)
station_data <- read.csv("NEStations.csv", header = TRUE)
View(station_data)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
# Define a function to find the closest station to a forest
find_closest_station <- function(lat, lon, station_data) {
# Compute distances to all stations
distances <- geosphere::distHaversine(
cbind(lon, lat),
cbind(station_data$LONGITUDE, station_data$LATITUDE)
)
# Find index of closest station
min_idx <- which.min(distances)
# Return ID and distance of closest station
return(list(STATION_ID = station_data$STATION_ID[min_idx],
DIST_KM = distances[min_idx]))
}
# Find closest station to each forest
forest_data <- forest_data %>% mutate(
STATION_INFO = pmap(list(LATITUDE, LONGITUDE), find_closest_station, station_data)
)
# Convert STATION_INFO column to separate columns
forest_data <- forest_data %>%
separate(STATION_INFO, into = c("STATION_ID", "STATION_DIST"), sep = ",") %>%
mutate(STATION_DIST = as.numeric(STATION_DIST))
which(is.na(forest_data$STATION_DIST))
###############
# Identify the forest(s) with missing distance
missing_idx <- which(is.na(forest_data$STATION_DIST))
# Get the coordinates of the forest with missing distance
missing_lat <- forest_data$LATITUDE[missing_idx]
missing_lon <- forest_data$LONGITUDE[missing_idx]
# Compute distances to all stations for the forest with missing distance
distances <- geosphere::distHaversine(
cbind(missing_lon, missing_lat),
cbind(station_data$LONGITUDE, station_data$LATITUDE)
)
# Find index of closest station
min_idx <- which.min(distances)
# Update the missing distance
forest_data$STATION_DIST[missing_idx] <- distances[min_idx]
# Create a new table with selected columns
Output <- forest_data %>% select(FOREST_NAME, STATION_ID, STATION_DIST)
View(Output)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
# Remove degree and direction of latitude and longitude in forest_data
forest_data$LATITUDE <- substr(forest_data$LATITUDE, 1, nchar(forest_data$LATITUDE)-3)
forest_data$LONGITUDE <- substr(forest_data$LONGITUDE, 1, nchar(forest_data$LONGITUDE)-3)
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
# Define a function to find the closest station to a forest
find_closest_station <- function(lat, lon, station_data) {
# Compute distances to all stations
distances <- geosphere::distHaversine(
cbind(lon, lat),
cbind(station_data$LONGITUDE, station_data$LATITUDE)
)
# Find index of closest station
min_idx <- which.min(distances)
# Return ID and distance of closest station
return(list(STATION_ID = station_data$STATION_ID[min_idx],
DIST_KM = distances[min_idx]))
}
# Find closest station to each forest
forest_data <- forest_data %>% mutate(
STATION_INFO = pmap(list(LATITUDE, LONGITUDE), find_closest_station, station_data)
)
View(forest_data)
View(forest_data[[7]][[1]])
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
# Remove degree and direction of latitude and longitude in forest_data
forest_data$LATITUDE <- substr(forest_data$LATITUDE, 1, nchar(forest_data$LATITUDE)-3)
forest_data$LONGITUDE <- substr(forest_data$LONGITUDE, 1, nchar(forest_data$LONGITUDE)-3)
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
View(forest_data)
View(forest_data)
############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)
View(MatchAccuracy)
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(binwidth = 1000, fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
# View results
print(forest_data)
View(forest_data)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
View(forest_data)
# Joseph Webb
# Honors Thesis
# March 9, 2023
# Load required libraries
library(tidyverse)
library(geosphere)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
# Remove degree and direction of latitude and longitude in forest_data
forest_data$LATITUDE <- substr(forest_data$LATITUDE, 1, nchar(forest_data$LATITUDE)-3)
forest_data$LONGITUDE <- substr(forest_data$LONGITUDE, 1, nchar(forest_data$LONGITUDE)-3)
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
)
# Load required libraries
library(tidyverse)
library(geosphere)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
# Remove degree and direction of latitude and longitude in forest_data
forest_data$LATITUDE <- substr(forest_data$LATITUDE, 1, nchar(forest_data$LATITUDE)-3)
forest_data$LONGITUDE <- substr(forest_data$LONGITUDE, 1, nchar(forest_data$LONGITUDE)-3)
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Round the distance measurements to one decimal place
forest_data$DIST_KM <- round(forest_data$DIST_KM, 1)
# View results
print(forest_data)
############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(binwidth = 1000, fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(forest_data)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Round the distance measurements to one decimal place
forest_data$DIST_KM <- round(forest_data$DIST_KM, 1)
# View results
print(forest_data)
############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(binwidth = 1000, fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(MatchAccuracy)
View(forest_data)
# Load required libraries
library(tidyverse)
library(geosphere)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("StateForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Round the distance measurements to one decimal place
forest_data$DIST_KM <- round(forest_data$DIST_KM, 1)
# View results
print(forest_data)
############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(binwidth = 1000, fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(MatchAccuracy)
View(forest_data)
# Load required libraries
library(tidyverse)
library(geosphere)
# Read in ForestData.csv and NEStations.csv
forest_data <- read.csv("ForestData.csv") %>%
select(-c(7:9)) %>% # remove empty columns
slice(1:304) # select rows 1-304
colnames(forest_data)[5] <- "LONGITUDE"
station_data <- read.csv("NEStations.csv", header = TRUE)
# Convert latitude and longitude columns to numeric
forest_data$LATITUDE <- as.numeric(forest_data$LATITUDE)
forest_data$LONGITUDE <- as.numeric(forest_data$LONGITUDE)
station_data$LATITUDE <- as.numeric(station_data$LATITUDE)
station_data$LONGITUDE <- as.numeric(station_data$LONGITUDE)
############ FINDING CLOSEST FOREST ##################
# Define a function to find closest station
find_closest_station <- function(lat, lon, station_data) {
distances <- geosphere::distHaversine(station_data[, c("LONGITUDE", "LATITUDE")], c(lon, lat))/1000
closest_station_index <- which.min(distances)
closest_station_id <- station_data$STATION_ID[closest_station_index]
closest_station_distance <- distances[closest_station_index]
return(list(closest_station = closest_station_id, DIST_KM = closest_station_distance))
}
# Update forest_data dataframe with closest station and distance
forest_data <- forest_data %>%
rowwise() %>%
mutate(CLOSE_STAT = find_closest_station(LATITUDE, LONGITUDE, station_data)$closest_station,
DIST_KM = find_closest_station(LATITUDE, LONGITUDE, station_data)$DIST_KM)
# Round the distance measurements to one decimal place
forest_data$DIST_KM <- round(forest_data$DIST_KM, 1)
# View results
print(forest_data)
############## Accuracy Report ###############
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
# Number of unique observations under CLOSE_STAT
unique_stations <- n_distinct(forest_data$CLOSE_STAT)
# Mean distance under DIST_KM
mean_distance <- mean(forest_data$DIST_KM)
# Standard deviation of distances under DIST_KM
sd_distance <- sd(forest_data$DIST_KM)
# Number of forests matched with a station farther than one standard deviation away from the mean DIST_KM
farther_than_sd <- sum(forest_data$DIST_KM > mean_distance + sd_distance | forest_data$DIST_KM < mean_distance - sd_distance)
# Create the MatchAccuracy matrix
MatchAccuracy <- matrix(nrow=3, ncol=2)
colnames(MatchAccuracy) <- c("Inquiry", "Output")
MatchAccuracy[,1] <- c("Number of unique observations under CLOSE_STAT", "Mean distance under DIST_KM", "Forests matched with station farther than 1 SD from mean DIST_KM")
MatchAccuracy[,2] <- c(unique_stations, mean_distance, farther_than_sd)
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(binwidth = 1000, fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(MatchAccuracy)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(forest_data)
View(MatchAccuracy)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
library(ggplot2)
ggplot(forest_data, aes(x=DIST_KM)) +
geom_histogram(fill="cornflowerblue", color="black") +
ggtitle("Distribution of Distance (km) from Forest to Closest Station") +
xlab("Distance (km)") + ylab("Count")
View(forest_data)
